import { hash } from 'bcryptjs';
import dbConnect from '@/lib/db';
import User from '@/models/User';
import { NextRequest } from 'next/server';

export async function POST(req: NextRequest) {
  await dbConnect();
  const { email, password, name } = await req.json();

  console.log('üì• –ë“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö —Ö“Ø—Å—ç–ª—Ç –∏—Ä–ª—ç—ç');
  console.log('‚û°Ô∏è –•“Ø–ª—ç—ç–∂ –∞–≤—Å–∞–Ω email:', email);
  console.log('‚û°Ô∏è –•“Ø–ª—ç—ç–∂ –∞–≤—Å–∞–Ω password:', password);

  if (!email || !password || !name) {
    return new Response(JSON.stringify({ error: '–ë“Ø—Ö —Ç–∞–ª–±–∞—Ä—ã–≥ –±”©–≥–ª”©–Ω”© “Ø“Ø' }), {
      status: 400,
    });
  }

  const existingUser = await User.findOne({ email });
  if (existingUser) {
    return new Response(JSON.stringify({ error: '–ò-–º—ç–π–ª –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞' }), {
      status: 409,
    });
  }

  const hashedPassword = await hash(password, 12);
  console.log('üîê hashedPassword:', hashedPassword);

  const user = await User.create({ email, name, password: hashedPassword });
  console.log('‚úÖ –•—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞:', user);

  return new Response(
    JSON.stringify({ message: '–ê–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç', user }),
    { status: 201 }
  );
}
